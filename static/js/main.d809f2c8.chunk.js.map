{"version":3,"sources":["Redux.js","CalculatorButtons.js","App.js","serviceWorker.js","index.js"],"names":["numbers","operations","keyIsValid","formula","key","includes","executeCalculation","result","operators","x","y","numberEntered","currentOperation","keypress","currentNumber","parseFloat","isNaN","actionCreators","type","initialState","formulaEntered","currentValue","CalculatorButtons","className","id","this","props","map","num","keyPressed","op","React","Component","connect","state","CalculatorButton","onClick","handleClick","ResetButton","EqualButton","undefined","dispatch","store","createStore","action","currentCalculatedResult","toString","split","window","__REDUX_DEVTOOLS_EXTENSION__","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d809f2c8.chunk.js","sourcesContent":["\nexport const numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.'];\n\nexport const operations = ['/', 'x', '-', '+'];\n\nfunction keyIsValid (formula, key) {\n    if (numbers.includes (key))\n    return true;\n    if (operations.includes (key))\n    return true;\n    return false\n} \n\nfunction executeCalculation (formula) {\n    let result = 0;\n\n    const operators = {\n        '+': (x, y) => x + y,\n        '-': (x, y) => x - y,\n        '/': (x, y) => x / y,\n        'x': (x, y) => x * y\n    };\n    let numberEntered = \"\"\n    let currentOperation = '+';\n    for (const keypress of formula) {\n        const currentNumber = parseFloat(numberEntered);\n        if  (numbers.includes(keypress) || (numberEntered === \"\" && keypress === \"-\")) {\n            numberEntered += keypress;\n        } \n        else if (operations.includes(keypress) && !isNaN(currentNumber)) {\n            result = operators[currentOperation](result, currentNumber);\n            numberEntered = \"\";\n            currentOperation = keypress;\n        } \n    }\n    const currentNumber = parseFloat(numberEntered);\n    if ( !isNaN(currentNumber)) {\n        result = operators[currentOperation](result, currentNumber);\n    } \n    return result;\n}\n\n// The action creators are here: \nconst KEYPRESS = \"KEYPRESS\";\nconst CLEAR = \"CLEAR\";\nconst EQUAL = \"EQUAL\";\n\nexport const actionCreators = {\n\n    keyPressed (key) {\n        return {\n            type: KEYPRESS, \n            key\n        }\n    }, \n    reset () {\n        return {\n            type: CLEAR\n        }\n    },\n    equal () {\n        return {\n            type: EQUAL\n        }\n    },\n}\n// Define initial state\n\nconst initialState = {\n    formulaEntered: [],\n    currentValue: 0\n};\n\n// The reducer here: \n\nexport const calculatorReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case CLEAR:\n          return initialState;\n        \n        case KEYPRESS:\n           if(keyIsValid(state.formulaEntered, action.key)) {\n               return {\n                   formulaEntered: [...state.formulaEntered, action.key],\n                   currentValue: action.key\n               }\n           } else return state;\n        case EQUAL:\n            const currentCalculatedResult = executeCalculation(state.formulaEntered);\n            return {\n                formulaEntered: currentCalculatedResult.toString().split(\"\"),\n                currentValue: currentCalculatedResult.toString()\n            }   \n        default: \n\n        return state;\n            \n    }\n}\n\n// creating redux store below\n","import { actionCreators } from './Redux'\nimport React from 'react';\nimport { numbers, operations } from './Redux'\nimport { connect } from \"react-redux\"\n\n\nexport default class CalculatorButtons extends React.Component {\n\n\n    render() {\n        return (\n            <div className=\"module-border-wrap\">\n                <div className=\"calculator\">\n                    <div id=\"display\" className=\"display\">\n                        {this.props.formulaEntered} <br /> {this.props.currentValue}\n                    </div>\n                    <div className=\"all-buttons-container\">\n                            {numbers.map(num => (\n                                <CalculatorButton className={`buttons ${num === 0 && 'big-h'}`} key={num} keyPressed={num} />\n                            ))} <ResetButton className=\"buttons\" />\n                            {operations.map(op => (\n                                <CalculatorButton className=\"buttons\" key={op} keyPressed={op} />\n                            ))} \n                    </div>\n                        <div className=\"equal-container\">\n                            <EqualButton className=\"equal-button\" />\n                        </div>\n                </div>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        currentValue: state.currentValue,\n        formulaEntered: state.formulaEntered\n    }\n}\n\nCalculatorButtons = connect(mapStateToProps)(CalculatorButtons);\n\nclass CalculatorButton extends React.Component {\n\n    onClick = () => {\n        this.props.handleClick(this.props.keyPressed);\n    }\n\n    render() {\n        return (\n            <button className={this.props.className} onClick={this.onClick}>\n                {this.props.keyPressed}\n            </button>\n        )\n    }\n}\n\nclass ResetButton extends React.Component {\n    onClick = () => {\n        this.props.handleClick();\n    }\n\n    render() {\n        return (\n            <button className={this.props.className} onClick={this.onClick}>\n                reset\n            </button>\n        )\n    }\n}\n\nclass EqualButton extends React.Component {\n\n    onClick = () => {\n        this.props.handleClick();\n    }\n\n    render() {\n        return (\n            <button className={this.props.className} onClick={this.onClick}>\n                =\n            </button>\n        )\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleClick: (key) => dispatch(actionCreators.keyPressed(key))\n    }\n}\n\nCalculatorButton = connect(undefined, mapDispatchToProps)(CalculatorButton)\n\n\nconst mapEqualDispatchToProps = (dispatch) => {\n    return {\n        handleClick: () => dispatch(actionCreators.equal())\n    }\n}\n\nEqualButton = connect(undefined, mapEqualDispatchToProps)(EqualButton)\n\n\nconst mapResetDispatchToProps = (dispatch) => {\n    return {\n        handleClick: () => dispatch(actionCreators.reset())\n    }\n}\n\nResetButton = connect(undefined, mapResetDispatchToProps)(ResetButton)\n\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport { calculatorReducer } from './Redux'\nimport CalculatorButtons from './CalculatorButtons'\n\n//React \n\n\nconst store = createStore(calculatorReducer,\n window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n\n\nexport default class App extends React.Component {\n\n\n  render() {\n    return (<Provider\n      store={store}>\n      <CalculatorButtons />\n    </Provider>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}